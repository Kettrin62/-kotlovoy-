# Generated by Django 4.0.5 on 2022-08-03 14:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ElementHasGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Деталь в группе',
                'verbose_name_plural': 'Детали в группах',
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Модель/Группа')),
            ],
            options={
                'verbose_name': 'Модель/Группа',
                'verbose_name_plural': 'Модели/Группы',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Вrands',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Бренд')),
                ('image', models.ImageField(blank=True, null=True, upload_to='media/images/', verbose_name='Картинка')),
                ('display_order', models.PositiveSmallIntegerField(verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
                'ordering': ('display_order', 'title'),
            },
        ),
        migrations.CreateModel(
            name='Elements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200, verbose_name='Название детали')),
                ('measurement_unit', models.CharField(max_length=30, verbose_name='Ед. измерения')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('image', models.ImageField(blank=True, null=True, upload_to='media/images/', verbose_name='Картинка')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('stock', models.PositiveIntegerField(verbose_name='Кол-во в наличии')),
                ('article', models.CharField(db_index=True, max_length=50, verbose_name='Артикул')),
                ('available', models.BooleanField(default=True, verbose_name='Доступность')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Дата редактирования')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='elements', to='catalog.вrands', verbose_name='Производитель')),
                ('groups', models.ManyToManyField(related_name='groups', through='catalog.ElementHasGroup', to='catalog.groups')),
            ],
            options={
                'verbose_name': 'Деталь',
                'verbose_name_plural': 'Детали',
                'ordering': ('title',),
            },
        ),
        migrations.AddField(
            model_name='elementhasgroup',
            name='element',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.elements', verbose_name='Деталь'),
        ),
        migrations.AddField(
            model_name='elementhasgroup',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.groups', verbose_name='Модель/Группа'),
        ),
        migrations.AddConstraint(
            model_name='elementhasgroup',
            constraint=models.UniqueConstraint(fields=('element', 'group'), name='unique elements in group value'),
        ),
    ]
